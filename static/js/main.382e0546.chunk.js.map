{"version":3,"sources":["Card/Card.js","AddCard/AddCard.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","toggleDescHandler","dropdownState","state","dropdown","setState","editHandler","document","querySelectorAll","index","style","display","zIndex","transform","boxShadow","querySelector","edit","closeEditHandler","saveEditHandler","description","descText","className","this","desc","dropIcon","circle","buttonStyle","cardStyle","backgroundColor","backgroundImage","title","functions","onClick","delete","rows","maxLength","defaultValue","console","log","value","status","statusChange","React","Component","AddCard","click","visibility","App","removeCardHandler","list","cards","splice","addCardHandler","pendingStatus","statusHandler","newStatus","map","card","key","Math","floor","random","bind","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.382e0546.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropdown: false,\n            edit: false\n        }\n    }\n\n    toggleDescHandler = () => {\n        let dropdownState = !this.state.dropdown;\n        // if (dropdownState) {\n\n        // }\n        this.setState({\n            dropdown: dropdownState\n        })\n    }\n\n    editHandler = () => {\n        // let currentState = this.state.edit;\n        document.querySelectorAll('.fa-circle')[this.props.index].style.display = 'none';\n        document.querySelectorAll('.fa-chevron-circle-up')[this.props.index].style.display = 'none';\n        document.querySelectorAll('.card')[this.props.index].style.zIndex = '10';\n        document.querySelectorAll('.card')[this.props.index].style.transform = 'scale(1.02)';\n        document.querySelectorAll('.card')[this.props.index].style.boxShadow = '4px 4px 15px rgba(255, 255, 255, 0.8)';\n        document.querySelector('.black').style.display = 'flex';\n        this.setState({\n            edit: true\n        })\n        // document.querySelectorAll('.fa-pen')[this.props.index].style.opacity = (currentState) ? '0.5' : '1';\n    }\n\n    closeEditHandler = () => {\n        document.querySelectorAll('.fa-circle')[this.props.index].style.display = '';\n        document.querySelectorAll('.fa-chevron-circle-up')[this.props.index].style.display = '';\n        document.querySelectorAll('.card')[this.props.index].style.zIndex = '';\n        document.querySelectorAll('.card')[this.props.index].style.boxShadow = '2px 2px 15px #ccc';\n        document.querySelectorAll('.card')[this.props.index].style.transform = 'scale(1)';\n        document.querySelector('.black').style.display = 'none';\n        this.setState({\n            edit: false\n        })\n    }\n\n    saveEditHandler = () => {\n        this.closeEditHandler();\n        this.props.edit(this.props.index);\n    }\n    \n    render() {\n        let description = null;\n        let descText = (\n            <p className=\"desc\">\n                {this.props.desc}\n            </p>\n        );\n        let dropIcon = <i className=\"fas fa-chevron-circle-down\"></i>;\n        let circle = <i className=\"far fa-circle\"></i>;\n        let buttonStyle = { display: '' };\n        let cardStyle = {\n            backgroundColor: '#8EC5FC',\n            backgroundImage: 'linear-gradient(62deg, #8EC5FC 0%, #E0C3FC 100%)'\n        }\n        let title = <p className=\"task\">{this.props.title}</p>;\n        let functions = (\n            <div className=\"side-buttons\">\n                <i className=\"fas fa-pen\" style={buttonStyle} onClick={this.editHandler}></i>\n                <i className=\"fas fa-trash\" onClick={this.props.delete}></i>\n            </div>\n        )\n        // <input className=\"task edit\" value={this.props.title} />\n        \n        if (this.state.edit) {\n            descText = <textarea rows=\"3\" maxLength=\"200\" className=\"desc edit i-desc\" defaultValue={this.props.desc}></textarea>;\n            title = <input className=\"task edit i-task\" defaultValue={this.props.title} />;\n            console.log(descText.value)\n            functions = (\n                <div className=\"side-buttons\">\n                    <i className=\"fas fa-check\" onClick={this.saveEditHandler}></i>\n                    <i className=\"fas fa-times\" onClick={this.closeEditHandler}></i>\n                </div>\n            )\n        }\n\n        if (!this.props.status) {\n            circle = <i className=\"fas fa-check-circle\"></i>;\n            cardStyle = {\n                backgroundColor: '#85FFBD',\n                backgroundImage: 'linear-gradient( 109.6deg,  rgba(170,255,169,1) 11.2%, rgba(17,255,189,1) 91.1% )'\n            }\n            buttonStyle = { display: 'none' }\n        }\n\n        if (this.state.dropdown) {\n            dropIcon = <i className=\"fas fa-chevron-circle-up\"></i>;\n            \n            description = (\n                <div className=\"sub\">\n                    {descText}\n                    {functions}\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"card\" style={cardStyle}>\n                <div className=\"head\">\n                    <div className=\"circle edit\" onClick={this.toggleDescHandler}> \n                        {dropIcon}\n                    </div>\n                    <div>\n                        {title}\n                    </div>\n                    <div className=\"circle check\" onClick={this.props.statusChange}>\n                        {circle}\n                    </div>\n                </div>\n                {description}\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\nimport './AddCard.css'\n\nclass AddCard extends React.Component {\n    render() {\n        const style = {\n            visibility: 'hidden'\n        }\n\n        return (\n            <div className=\"add-card\" onClick={this.props.click}>\n                <i className=\"fas fa-plus\"></i>\n                <p>Add New Task</p>\n                <i className=\"fas fa-plus\" style={style}></i>\n            </div>\n        )\n    }\n}\n\nexport default AddCard;","import React from 'react';\nimport './App.css';\nimport './icons.css';\nimport Card from './Card/Card'\nimport AddCard from './AddCard/AddCard'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [\n        {title: 'Title One', desc: 'This is a sample description.', pendingStatus: true},\n        {title: 'Title Two', desc: 'This is a sample description.', pendingStatus: true}\n      ]\n    }\n  }\n\n  removeCardHandler = index => {\n    let list = this.state.cards;\n    list.splice(index, 1);\n\n    this.setState({\n      cards: list\n    })\n  }\n\n  addCardHandler = () => {\n    let list = this.state.cards;\n    this.setState({\n      cards: [ {title: 'New Title', desc: 'This is a sample description.', pendingStatus: true}, ...list ]\n    })\n  }\n\n  statusHandler = index => {\n    let list = this.state.cards;\n    let newStatus = !this.state.cards[index].pendingStatus;\n    list[index].pendingStatus = newStatus;\n    this.setState({\n      cards: list\n    })\n  }\n\n  editHandler = index => {\n    let list = this.state.cards;\n    console.log(index);\n    list[index].title = document.querySelectorAll('.i-task')[index].value;\n    list[index].desc = document.querySelectorAll('.i-desc')[index].value;\n    console.log(list)\n    this.setState({\n      cards: list\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='black'></div>\n        <div className=\"head-box\">\n          <div className=\"container\">\n            <p className=\"headline\">To-Do App</p>\n          </div>\n        </div>\n        <div className=\"card-list\">\n          <AddCard click={this.addCardHandler} />\n          {this.state.cards.map((card, index) => {\n            return <Card \n                      title={card.title} \n                      desc={card.desc}\n                      status={card.pendingStatus}\n                      key={Math.floor(Math.random() * 1000 + Math.random() * 100 + Math.random() * 10)}\n                      index={index}\n                      statusChange={this.statusHandler.bind(this, index)}\n                      delete={this.removeCardHandler.bind(this, index)}\n                      edit={this.editHandler.bind(this, index)} />\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}